@startuml jetons

class JetonException {
  + getInfo(): std::string
}

enum CouleurJeton {
  RUBIS
  SAPHIR
  ÉMÉRAUDE
  ONYX
  DIAMANT
  OR
  PERLE
}

class Jeton {
  - couleur: CouleurJeton
  + getCouleur(): CouleurJeton
}

class LotDeJetons {
  - jetons: std::vector<const Jeton*>
  - max_jetons: size_t
  - max_or: size_t
  - max_perle: size_t
  - max_rubis: size_t
  - max_onyx: size_t
  - max_saphir: size_t
  - max_dimant: size_t
  - max_emeraude: size_t
  + getNbJetons(): size_t
  + getJetons(i: size_t): const Jeton&
}

class Privilege {
}

class LotPrivileges {
  - privileges: std::vector<const Privilege*>
  - max_privileges: size_t
  + getNbPrivileges(): size_t
  + getPrivilege(i: size_t): const Privilege&
}

class Sac {
  - jetons: std::vector<const Jeton*>
  + estVide(): bool
  + getNbJetons(): size_t
  + ajouterJeton(j: const Jeton&): void
  + piocherJeton(): const Jeton&
}

class Plateau {
  - jetons: std::array<std::array<const Jeton*, 5>, 5>
  - privileges: std::vector<const Privilege*>
  - liste_pos: std::array<std::tuple<size_t, size_t>, 25>
  + recupererJeton(i: size_t, j: size_t): const Jeton&
  + recupererPrivilege(): const Privilege&
  + positionerJeton(jeton: const Jeton&): void
  + poserPrivilege(privilege: const Privilege&): void
  + remplirPlateau(sac: Sac&): void
  + estVide(): bool
}

Jeton "25" --* LotDeJetons
Jeton "0..25" -o "0..1" Sac

Privilege "3" --* LotPrivileges

Jeton "0..25" -o "0..1" Plateau
Privilege "0..3" -o "0..1" Plateau

@enduml