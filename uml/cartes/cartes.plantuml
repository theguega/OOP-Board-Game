@startuml
enum CouleurCarte

enum TypeCarte

enum Capacite

class Carte{
    - type : enum
    - prix : Prix
    - bonus : Bonus
    - capacite1 : enum
    - capacite2 : enum
    - nbCouronnes : int
    - nbPtsPrivilege : int
    + Carte(TypeCarte t, Prix& p, Capacite c1, Capacite c2, Bonus& b, unsigned int nbC, unsigned int nbP);
    + Carte(TypeCarte t, Capacite c, unsigned int nbP)
    + ~Carte()
    + getType()
    + getPrix() 
    + getCapacite()
    + getBonus()
    + getNbCouronnes() 
    + getNbPtsPrivilege()
}

class Bonus{
    - couleur : enum
    - nbBonus : int
    + Bonus(CouleurCarte c = CouleurCarte::indt, int n = 0)
    + setCouleur()
    + getCouleur()
    + getNbBonus()
}

class Prix{
    - blanc : int
    - bleu : int
    - vert : int
    - noir : int
    - rouge : int
    - perle : int
    + Prix(...)
    + getBlanc()
    + getBleu()
    + get...()
}

class Pioche {
    - type_cartes : enum
    - cartes : vector<Carte*>
    - nb_cartes : int
    + Pioche(const JeuCarte& j, TypeCarte t)
    + ~Pioche()
    + estVide()
    + getNbCartes()
    + piocher()
}

class JeuCarte {
    - cartes_nv1 : array
    - cartes_nv2 : array
    - cartes_nv3 : array
    - cartes_nobles : array
    + JeuCarte()
    + ~JeuCarte()
    + getNbCartes_nv1()
    + getNbCartes_nv2()
    + getNbCartes_nv3()
    + getNbCartes_nobles()
    + getCarteNiv1()
    + getCarteNiv2()
    + getCarteNiv3()
    + getCarteNoble()
}

class Pyramide {
    + acheterCarte() : Carte
}

Carte "67"---* JeuCarte
Carte "*" --o "0...1" Pyramide
Carte "0...30" --o "0...1" Pioche
Carte o-- "0...1" Bonus
Carte o-- "0...1"Prix
Carte o-- CouleurCarte
Carte o-- TypeCarte
Carte o-- Capacite
@enduml